/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.util.Date;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import models.Customer;
import models.DBManager;
import models.Order;
import models.OrderLine;
import models.ViewUtils;

/**
 *
 * @author manue
 */
public class ViewBasket extends javax.swing.JFrame {

    private Customer loggedInCustomer;
    private Order currentOrder;
    /**
     * Creates new form ViewBasket
     */
    public ViewBasket(Customer customer, Order order) {
        loggedInCustomer = customer;
        currentOrder = order;
        initComponents();
        this.pack();
        ViewUtils.setStandardSize(this);
        //initialising a DefaultTableModel object
        DefaultTableModel basketModel = (DefaultTableModel)tblBasket.getModel();
        
        //for loop through each Orderline inside currentOrder, to fill up the table
        for(Map.Entry<Integer, OrderLine> olEntry : currentOrder.getOrderLines().entrySet())
        {   //initialising Orderline object to get the values
            OrderLine orderLine = olEntry.getValue();
            //adding values to the rows
            basketModel.addRow( new Object[] {
            orderLine.getProduct().getProductId(),
            orderLine.getProduct().getProductName(),
            "£"+
            String.format("%.02f", orderLine.getProduct().getPrice()),
            orderLine.getQuantity()
            }
            );
        }
        //updating label text
        lblOrderTotal.setText("£"+String.format("%.02f",currentOrder.getOrderTotal()));
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBasket = new javax.swing.JTable();
        btnRemoveProduct = new javax.swing.JButton();
        lblErrorMessage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblOrderTotal = new javax.swing.JLabel();
        btnBuyProducts = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setText("Add More Products");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblBasket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductId", "Product", "Price", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(tblBasket);

        btnRemoveProduct.setText("Remove Product");
        btnRemoveProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveProductActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Total:");

        lblOrderTotal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblOrderTotal.setText("jLabel2");

        btnBuyProducts.setText("Buy Products");
        btnBuyProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyProductsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveProduct)
                        .addGap(93, 93, 93)
                        .addComponent(btnBuyProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(38, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblOrderTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblOrderTotal)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuyProducts)
                    .addComponent(btnRemoveProduct)
                    .addComponent(btnBack))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        //going back to the desired page, passing the order as well
        ViewProducts viewProducts = new ViewProducts(loggedInCustomer, currentOrder);
        this.dispose(); //closing the current page
        viewProducts.setVisible(true); //showing the desired page
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRemoveProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveProductActionPerformed
        //getting the index of the selected row
        int selectedRow = tblBasket.getSelectedRow();
        //error case: no product has been selected
        if (selectedRow == -1)
        {
            lblErrorMessage.setText("Error: no product selected");
        }
        else
        {
            //we get the id we want: we need to convert the object into a value
            int productId = (int)tblBasket.getValueAt(selectedRow, 0);
            currentOrder.removeOrderLine(productId);
            //updating currentOrder
            currentOrder.calculateOrderTotal();
            //updating label text
            lblErrorMessage.setText("Product Removed");
            //casting tblBasket as DefaultTableModel
            DefaultTableModel basketModel = (DefaultTableModel)tblBasket.getModel();
            //removing selected record
            basketModel.removeRow(selectedRow);
           //setting the desired model
            tblBasket.setModel(basketModel);
            //updating label text
            lblOrderTotal.setText("£"+String.format("%.02f",currentOrder.getOrderTotal()));
            
            //lblOrderTotal.setText(String.format("%.02f",currentOrder.getOrderTotal()));

        }
    }//GEN-LAST:event_btnRemoveProductActionPerformed

    private void btnBuyProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyProductsActionPerformed
        
         //initialising numberOfOrderLines
        int numberOfOrderLines = 0;
        
        //looping throught hashmap
        for(Map.Entry<Integer, OrderLine> olEntry : currentOrder.getOrderLines().entrySet())
        {
            //increasing numberOfOrderLines
            numberOfOrderLines++;
        }
        //checking first condition: no orderline previously added to the order
        if(numberOfOrderLines == 0)
        {   //setting lblErrorMessage
            lblErrorMessage.setText("Error: Basket Is Currently Empty");
        }
        else
        {   //setting the date as Today
            currentOrder.setOrderDate(new Date());
            //changing the order status
            currentOrder.setStatus("Complete");
            //calling DBManager
            DBManager db = new DBManager();
            //calling writeOrder method
            int orderId = db.writeOrder(currentOrder, loggedInCustomer.getUserName());
            
            //looping through each OrderLine
            for(Map.Entry<Integer, OrderLine> olEntry : currentOrder.getOrderLines().entrySet())
            {   
                //getting value of actualOrderLine
                OrderLine actualOrderLine = olEntry.getValue();
                //calling writeOrderLines method and passing orderLine and orderId
                db.writeOrderLines(actualOrderLine, orderId);
                //calling updateStockAvailability and passing productId and quantity
                db.updateStockAvailability(actualOrderLine.getProduct().getProductId(), actualOrderLine.getQuantity());
            }
            //calling OrderConfirmation
            OrderConfirmation orderConfirmation = new OrderConfirmation(loggedInCustomer, currentOrder);
            //closing current page
            this.dispose();
            //showing the desired page
            orderConfirmation.setVisible(true);
        }
       
    }//GEN-LAST:event_btnBuyProductsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBasket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBasket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBasket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBasket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              //  new ViewBasket().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBuyProducts;
    private javax.swing.JButton btnRemoveProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblOrderTotal;
    private javax.swing.JTable tblBasket;
    // End of variables declaration//GEN-END:variables
}
