/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import models.DBManager;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import models.Product;
import models.Customer;
import models.Order;
import models.OrderLine;
import models.ViewUtils;

/**
 *
 * @author manue
 */
public class ViewProducts extends javax.swing.JFrame {

    //creates new Customer Object
    private Customer loggedInCustomer;
    //making the HashMap global and Private
    private HashMap<Integer, Product> products;
    //creating a new global variable - Order
    private Order currentOrder;

    /**
     * Creates new form ViewProducts
     */
    public ViewProducts(Customer customer, Order order) {
        //creating connection for loggedInZooKeeper
        loggedInCustomer = customer;
        currentOrder = order;
        initComponents();
        this.pack();
        ViewUtils.setStandardSize(this);
        DBManager db = new DBManager();
        //loading products from the database
        products = db.loadProducts();
        //disables selected elements if getIsRegistered() == false
        if (loggedInCustomer.getIsRegistered() == false) {
            btnAddToBasket.setVisible(false);
            btnViewBasket.setVisible(false);
            lblQuantity.setVisible(false);
            txtQuantity.setVisible(false);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblProducts = new javax.swing.JLabel();
        lblCategories = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        btnViewBasket = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCategories = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstProduct = new javax.swing.JList<>();
        btnAddToBasket = new javax.swing.JButton();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        lblErrorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblProducts.setText("PRODUCTS");

        lblCategories.setText("CATEGORIES");

        lblProduct.setText("PRODUCT");

        btnViewBasket.setText("View Basket");
        btnViewBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewBasketActionPerformed(evt);
            }
        });

        lstCategories.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Clothing", "Footwear" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstCategories.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCategoriesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstCategories);

        jScrollPane2.setViewportView(lstProduct);

        btnAddToBasket.setText("ADD TO BASKET");
        btnAddToBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToBasketActionPerformed(evt);
            }
        });

        lblQuantity.setText("Quantity:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddToBasket))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblProducts)
                                .addGap(111, 111, 111)
                                .addComponent(btnViewBasket))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCategories)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblProduct)
                                        .addGap(57, 57, 57))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblQuantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack)
                            .addComponent(lblProducts)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnViewBasket)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCategories)
                    .addComponent(lblProduct))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAddToBasket)
                .addGap(84, 84, 84))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        //checking condition
        if (loggedInCustomer.getIsRegistered() == true) 
        {   
            //initialising integer for our JOptionPane
            int dialogButton = JOptionPane.YES_NO_OPTION;
            //initialising integer for our dialogResult
            int dialogResult = JOptionPane.showConfirmDialog(null, "Exiting will clear the basket, are you sure?", "Warning", dialogButton);
            //
            if(dialogResult == JOptionPane.YES_OPTION)
            {   //passing in the logged in customer
                CustomerHome customerHome = new CustomerHome(loggedInCustomer);
                this.dispose(); //closing the current page
                customerHome.setVisible(true); //showing the desired page
            }
        } 
        else 
        {   //opening the mainMenu
            MainMenu mainMenu = new MainMenu();
            mainMenu.setVisible(true); //showing the current page
            this.dispose(); //closing the current page
        }
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void lstCategoriesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCategoriesValueChanged
        // coding the event for the list
        DefaultListModel productList = new DefaultListModel();
        //getting the option selected by the user and storing it as a String
        String selectedCategory = lstCategories.getSelectedValue();
        //for loop to read elements from the Product HashMap
        for (Map.Entry<Integer, Product> productEntry : products.entrySet()) {   //getting the Product value from the map
            Product product = productEntry.getValue();
            //checking the type of Product and comparing it to either Birds or Fish
            if (product.getClass().getName().equals("models." + selectedCategory)) {   //adding product to the productList object
                productList.addElement(product);
            }
        }
        //adding element to lstProduct
        lstProduct.setModel(productList);
    }//GEN-LAST:event_lstCategoriesValueChanged

    private void btnAddToBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToBasketActionPerformed

        //displays error message if the user does not select a quantity
        if (lstProduct.getSelectedIndex() == -1) {
            lblErrorMessage.setText("Error: First Select Product and/or quantity");
        }
        else
        //try and catch statement, to catch error when product and/or quantity are not being selected
        try {
            //gets text from text field and stores it into a string
            String quantityText = txtQuantity.getText();
            //converts string into int
            int quantity = Integer.parseInt(quantityText);

            //creating Product object
            Object selectedProductObject = (Object)lstProduct.getSelectedValue();
            Product selectedProduct = (Product) selectedProductObject;
            
            //condition: quantity must be a positive number
            if (quantity <=0)
            {   //displaying error message
                lblErrorMessage.setText("Quantity should be a positive number");
            }
            //condition: stockLevel must be greater than quantity
            else if (selectedProduct.getStockLevel() >= quantity) 
            {
                //calling OrderLine constructor
                OrderLine orderLine = new OrderLine(0, selectedProduct, quantity);
                if (currentOrder.addOrderLine(orderLine) == true) 
                {   
                    //displaying feedback message
                    lblErrorMessage.setText("Product added to the Basket");
                    //updating currentOrder
                    currentOrder.calculateOrderTotal();
                }
                else
                {
                    //dispalying error message
                    lblErrorMessage.setText("Error: Product already added to the Basket");
                }
            } 
            else 
            {   
                //displaying error message
                lblErrorMessage.setText("Error: Not enough items in stock");
            }
        } 
        catch (Exception e) 
        {   //displaying error message
            lblErrorMessage.setText("Error: Quantity should be an integer");
        }

    }//GEN-LAST:event_btnAddToBasketActionPerformed

    private void btnViewBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewBasketActionPerformed
        //opening the selected page and passing loggedInZooKeeper and currentOrder 
        ViewBasket viewBasket = new ViewBasket(loggedInCustomer, currentOrder);
        this.dispose();//closing the current page
        viewBasket.setVisible(true);
    }//GEN-LAST:event_btnViewBasketActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ViewProducts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToBasket;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnViewBasket;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCategories;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JLabel lblProducts;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JList<String> lstCategories;
    private javax.swing.JList<String> lstProduct;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
